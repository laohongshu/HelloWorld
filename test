-(void)test{
    DJIFlightController* fc = [DemoComponentHelper fetchFlightController];
    [fc.simulator setFlyZoneLimitationEnabled:YES withCompletion:^(NSError * _Nullable error) {
        <#code#>
    }];

}


-(void) test1:(id)sender{
    DJILightbridgeLink* lightbridgelink = DJISDKManager.product.airLink.lightbridgeLink;
    [lightbridgelink setBandwidthAllocationForMainCamera:1 withCompletion:^(NSError * _Nullable error) {
        if(error!=NULL){
            NSLog(@"luce error 1:%@",error.description);
        }else{
        NSLog(@"luce setBandwidthAllocationForMainCamera to 1 ");
        }
    }];
    
    [lightbridgelink setBandwidthAllocationForLeftCamera:0.5 withCompletion:^(NSError * _Nullable error) {
        if(error!=NULL){
            NSLog(@"luce error 2:%@",error.description);
        }else{
        NSLog(@"luce setBandwidthAllocationForLeftCamera to 0.5 ");
        }
    }];
    
    [lightbridgelink getBandwidthAllocationForMainCameraWithCompletion:^(float percent, NSError * _Nullable error) {
        if(error!=NULL){
            NSLog(@"luce error 3:%@",error.description);
        }else{
        NSLog(@"luce getBandwidthAllocationForMainCameraWithCompletion:%f",percent);
        }
    }];
    
    [lightbridgelink getBandwidthAllocationForLeftCameraWithCompletion:^(float percent, NSError * _Nullable error) {
        if(error!=NULL){
            NSLog(@"luce error 4:%@",error.description);
        }else{
        NSLog(@"luce getBandwidthAllocationForLeftCameraWithCompletion:%f",percent);
        }
    }];
}

//
    DJIBattery* battery = [DemoComponentHelper fetchBattery];
    [battery getCellVoltagesWithCompletion:^(NSArray<NSNumber *> * _Nullable cellVoltages, NSError * _Nullable error) {
        ShowResult(@"luce: getCellVoltagesWithCompletion. %@", cellVoltages);
    }];
    
    DJIFlightController* fc = [DemoComponentHelper fetchFlightController];
    [fc getSerialNumberWithCompletion:^(NSString * _Nullable serialNumber, NSError * _Nullable error) {
        ShowResult(@"luce: serialNumber %@", serialNumber);
    }];
    
        DJIKeyManager *keyManager = [DJISDKManager keyManager];
        DJIFlightControllerKey *serialnum = [DJIFlightControllerKey keyWithParam:DJIParamSerialNumber];
    [keyManager getValueForKey:serialnum withCompletion:^(DJIKeyedValue * _Nullable value, NSError * _Nullable error) {
        if(error == NULL){
        NSLog(@"luce serialnum: %@",value);
        }else{
            NSLog(@"luce error: %@",error.description);
        }
    }];
    
    
    DJIRemoteController* rc = [DemoComponentHelper fetchRemoteController];
    [rc getPairingStateWithCompletion:^(DJIRCPairingState state, NSError * _Nullable error) {
        <#code#>
    }]
    
guard let serialKey = DJIFlightControllerKey(param:DJIParamSerialNumber) else {return}  //luce
        DJISDKManager.keyManager()?.getValueFor(serialKey, withCompletion: { (value, error) in
            NSLog("luce serialKey is:\(value)")
        })

        let lb = DJISDKManager.product()?.airLink?.lightbridgeLink;
        lb?.getBandwidthAllocationForLBVideoInputPort(completion: { (lbband:Float,error:Error?) in
            if error == nil{
                NSLog("luce getBandwidthAllocationForLBVideoInputPort:" + String(describing: lbband))
            }else{
                NSLog("luce getBandwidthAllocationForLBVideoInputPort error:" + String(describing:error))
            }
        })
        
        lb?.getBandwidthAllocationForHDMIVideoInputPort(completion: { (hdmival:Float, error:Error?) in
            if error == nil{
                NSLog("luce getBandwidthAllocationForHDMIVideoInputPort:" + String(describing: hdmival))
            }else{
                NSLog("luce getBandwidthAllocationForHDMIVideoInputPort error:" + String(describing:error))
            }
        })

            let lb = DJISDKManager.product()?.airLink?.lightbridgeLink;
            lb?.setBandwidthAllocationForLBVideoInputPort(0.5, withCompletion: { (error:Error?) in
                if error == nil{
                    NSLog("luce setBandwidthAllocationForLBVideoInputPort:0.5")
                }else{
                    NSLog("luce setBandwidthAllocationForLBVideoInputPort error:" + String(describing:error))
                }
            })
            lb?.setBandwidthAllocationForHDMIVideoInputPort(0, withCompletion: { (error:Error?) in
                if error == nil{
                    NSLog("luce setBandwidthAllocationForLBVideoInputPort:0")
                }else{
                    NSLog("luce setBandwidthAllocationForHDMIVideoInputPort error:" + String(describing:error))
                }
            })
        }

      let lb = DJISDKManager.product()?.airLink?.lightbridgeLink;
        lb?.getBandwidthAllocationForLBVideoInputPort(completion: { (lbband:Float,error:Error?) in
            if error == nil{
                NSLog("luce getBandwidthAllocationForLBVideoInputPort:" + String(describing: lbband))
            }else{
                NSLog("luce getBandwidthAllocationForLBVideoInputPort error:" + String(describing:error))
            }
        })
        
        lb?.getBandwidthAllocationForHDMIVideoInputPort(completion: { (hdmival:Float, error:Error?) in
            if error == nil{
                NSLog("luce getBandwidthAllocationForHDMIVideoInputPort:" + String(describing: hdmival))
            }else{
                NSLog("luce getBandwidthAllocationForHDMIVideoInputPort error:" + String(describing:error))
            }
        })
